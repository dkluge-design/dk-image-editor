import { Annotation, EditorPlugin, ImageItem, Sticker } from '../core/EditorCore';
type SelectableItem = (Annotation | Sticker | ImageItem) & {
    type: string;
};
export declare class HtmlSelectionPlugin implements EditorPlugin {
    name: string;
    private editor;
    private selectedItem;
    private isDragging;
    private isResizing;
    private isRotating;
    private dragOffset;
    private resizeHandle;
    private rotateStartAngle;
    private isSelectMode;
    private overlayContainer;
    private manipulators;
    private onSelectionChange?;
    private canvasScale;
    private isBoxSelecting;
    private boxSelectStart;
    private boxSelectEnd;
    private selectionBox;
    private selectedItems;
    private isShiftPressed;
    private initialAspectRatio;
    initialize(editor: any): void;
    setSelectMode(isSelect: boolean): void;
    selectItem(item: SelectableItem): void;
    setSelectionChangeCallback(callback: (hasSelection: boolean) => void): void;
    setCanvasScale(scale: number): void;
    clearSelection(): void;
    private createOverlay;
    private createManipulator;
    private showManipulators;
    private hideManipulators;
    private updateManipulatorPositions;
    private startResize;
    private startRotation;
    private addGlobalListeners;
    private removeGlobalListeners;
    private addKeyboardListeners;
    private handleKeyDown;
    private handleKeyUp;
    private handleGlobalMouseMove;
    private handleGlobalMouseUp;
    private handleGlobalTouchMove;
    private handleGlobalTouchEnd;
    handleMouseDown(event: any): void;
    handleMouseMove(event: any): void;
    handleMouseUp(): void;
    render(ctx: CanvasRenderingContext2D): void;
    deleteSelected(): void;
    copySelected(): void;
    private isSticker;
    private isImage;
    private getItemCenter;
    private moveItem;
    private resizeItem;
    private updateItemInState;
    private isPointInItem;
    refreshSelection(): void;
    private showSelectionBox;
    private updateSelectionBox;
    private hideSelectionBox;
    private finishBoxSelection;
    private getItemBounds;
    private showMultiSelectionBorders;
    private isItemInBox;
    private updateMultipleItemsInState;
    moveSelectedToFront(): void;
    moveSelectedToBack(): void;
    moveSelectedForward(): void;
    moveSelectedBackward(): void;
    isMultipleSelection(): boolean;
    getSelectedCount(): number;
    hasSelection(): boolean;
    getSelectedItem(): SelectableItem | null;
    getSelectedItems(): SelectableItem[];
    updateSelectedItemColors(strokeColor?: string, fillColor?: string): void;
    updateSelectedTextProperties(updatedItem: SelectableItem): void;
    updateSelectedItemStrokeWidth(strokeWidth: number): void;
    private transformPoint;
    private getTextWidth;
    private createSelectionBorder;
    private pointToLineDistance;
    destroy(): void;
}
export {};
//# sourceMappingURL=HtmlSelectionPlugin.d.ts.map